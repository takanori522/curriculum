IT（情報技術）:インターネットなどの通信とコンピュータとを駆使する情報技術。
ICT（情報通信技術）:ITにコミュニケーションの要素を含めたもの。
IoT：インターネットとは無関係だったジャンルのモノをインターネットに繋ぐこと。

OS：アプリやデバイスを動作させるための基本となるソフトウェアのこと。例：windows,android,iOS
Windows:マイクロソフト社が開発したOS。
macOS：Appleが提供するMac用のOS。
UNIX：初めて高水準言語で書かれたOS。アセンブラり言語→C言語
Linux：UNIX互換OS,主にサーバー用として使うOS,オープンソースソフトウェアとして広く公開

マークアップ：文書構造（テキスト）や視覚表現（装飾）などの情報を、コンピューターが正しく認識できるように、タイトルや見出しなどの各構成要素に「タグ」と呼ばれる識別のための目印を使い、意味付けを行っていくことを意味します。
フロントエンド：WebサービスやWebアプリケーションで直接ユーザーの目に触れる部分のこと。
HTML：HPで使用される記述言語。(内容)
CSS：Webページの要素の配置や見栄えなどを記述するための言語。(見た目)
JavaScript：Webサイトやシステムの開発に使われているプログラミング言語のこと。(動作)
jQuery：Webブラウザ上で動作するJavaScriptもオープンソースライブラリ。
JAVA SE：Javaの基本となるAPIをまとめたもの。

サーバーサイド：サーバ側で動く何かを意味している。
.NET(NET Framework)：アプリケーション開発・実行環境。Microsoft社が開発。
C#(C#.NET)：オブジェクト指向言語。.NETシステムで稼働するアプリケーションを構築できる。汎用性が高い。
VB(Visual Basic)：Microsoft社が開発。Windows上で動くプログラムを作るためのプログラミング言語。
　　　　　　　　　名前の歴史：Visual Basic→Visual Basic .NET→Visual Basic（中身は、Visual Basic .NET）


ダイナミックリンク（動的リンク）：動かすときにくっつける
スタティックリンク（静的リンク）：作るときにくっつける
DLL（ダイナミックリンクライブラリ）：動かすときにくっつける部品ファイル
スタティックリンクライブラリ：作るときにくっつける部品ファイル

Java：C言語をベースに開発されたプログラミング言語。実行環境の自由度が高い。処理速度が速く安定性。
　　　セキュリティ性が高い。
Java SE：Javaの基本機能をまとめたもの。
Java EE（Jakarta EE）：JavaSEを元にしてサーバーサイドの機能を追加したもの。
Perl：UNIXやWindowsなどの環境下でも動作する。C言語やシェルスクリプトなどの他言語も取り入れている。
　　　Web開発に用いられることが多い。使いやすい。後方互換性。テキスト処理に優れている。
　　　可読性が高い。コンパイルが不要。CPANモジュールが豊富なこと。

後方互換性：互換性の区分のうち、より新しい製品が既存の（古い）製品を扱うことができることを特に示す区分である。

コンパイル：人間様が分かる言葉で書いたプログラムの元ネタ（ソースコード）の中身をコンピュータさんが分かる言葉に翻訳すること。

PHP：動的にWebページを生成することができるサーバーサイドのスクリプト言語。
　　 HTMLで記述したファイルの中に埋め込んで使える。処理はWebサーバー側で行われるサーバーサイドの言語である。
　 　掲示板・問い合わせフォーム・ショッピングカート等

Ruby：日本で開発されたオブジェクト指向スクリプト言語。プリケーションソフトウェアを作成するためのもの。

フレームワーク：アプリケーションを開発するとき、その土台として機能させるソフトウェアのこと。

Apache：世界で最も利用されているWebサーバーソフト。
　　　　同時・複数アクセスへの対処の仕方→1アクセスに対して、1つの対応。
　　　　アクセス急増時のサーバーへの負荷→いっきに負荷増。
　　　　その結果Webサーバーの動き→遅くなり、ダウンしやすくなる。
nginx：Webサーバーのシェアは、NginxはApacheに次いで第2位です。
　　　 複数のアクセスに対して、1つの対応にまとまる。アクセスに比例して負荷は急激に増えない。
　　　 処理速度は維持し、ダウンしにくい。

SQL：データベース言語。データベースの定義や操作を行うことができる。
Db2：リレーショナルデータベース管理システム。SQLを初めて採用したデータベース管理システム。
レーショナル型データベース：各行の各列にデータが収録されている表(table)のようなデータベースである。
MySQL：オープンソースのSQLリレーショナルデータベース管理システム。
SQLリレーショナルデータベース管理システム：リレーショナルデータベースを管理するためのシステム。

Maria DB：MySQLから派生したもので、MySQLと共通点の多いデータベース。オープンソース。
　　　　　あまり複雑な処理はできない。パフォーマンスが高い。
　　　　　レプリケーションの並列処理による性能向上。
　　　　　複数マスターによるレプリケーション。
　　　　　グローバルトランザクションIDの採用によるサーバーの柔軟な切り替え。

階層型データベース：データをツリー状に格納。一つの親データに対して、複数の子データが存在し、親と子は「1対多」の関係となる。柔軟性が低い。

ネットワーク型データベース：データを網目状に構成。1つの子データから複数の親データへのアクセスが可能となり、これらのノードの繋がりが網目上になることから、ネットワーク型と呼ばれている。柔軟性が低い。

Oracle DB：高い堅牢性を持つ。
　　　　　 行レベルでの排他制御「行レベル・ロック」を行うことで、同時に多くのユーザーが利用できる。
　　　　　 検索時点のデータを読み取ることが保証される「読み取り一貫性」
　　　　　 パフォーマンスの向上、機能拡張などビジネスニーズを満たす機能。
　　　　　 有償（高価）
　　　　　 
堅牢性：ハードウェアなどが丈夫で壊れにくい設計になっていること。

PostgreSQL：リレーショナルデータベースの作成や操作、管理ができるオープンソースのデータベース管理システムの一つ。
　　　　　　機能の豊富さや拡張性の高さに定評。

SQLite：オープンソースで軽量のRDBMS。簡易的なデータベースである。設定不要な自己完結型システム。
　　　　マルチプラットフォーム。データ型の指定を強制しない。

SQL Server：Microsoft社が開発したRDBMS。（データベース管理システム）
　　　　　　直感的に操作できる。独自拡張の「Transact-SQL」が使える。システム規模に合わせたエディションが豊富。

CRUD：システムに必要な4つの主要機能である「Create（生成）」「Read（読み取り）」「Update（更新）」「Delete（削除）」の頭文字を並べた用語。→登録・変更・削除・参照機能のこと。

トランザクション：複数の処理をひとつにまとめたもの。パフォーマンス評価などに使われる。

コミット：処理や変更などを確定させる、反映させるなど。

ロールバック：情報システムの分野では、システム障害やデータの喪失、破損などが起きた際に、以前に正常に稼働していたある時点の状態に戻して復旧を試みることを指す。

排他制御（排他ロック）：複数の主体が同じ資源を同時に利用すると競合状態が生じる場合に、ある主体が資源を利用している間、別の主体による資源の利用を制限もしくは禁止する仕組みのこと。
共有資源に対して同時にアクセスしても問題なく動作できる制御。

楽観ロック：そもそも「同時アクセスはあまり起きない」という楽観的な考え方の排他制御です。
　　　　　　データ自体をロックすることはせず、更新対象のデータが更新前と同じであるかを確認してから
　　　　　　更新することで、データの整合性を保つ排他制御。

悲観ロック：同じデータを他者が頻繁に更新するという悲観的な考え方の排他制御です。
　　　　　　更新対象データを取得時にロックして他者が操作できないようにする方式。

実行計画：実際に実行されるプログラムの概要を提示したもの。

SQLチューニング：SQL文のパフォーマンスを、特定の測定可能かつ達成可能な目標に合うように向上させる反復プロセスです。

パフォーマンス：機器やソフトウェア、システムなどの処理性能や実行速度、通信回線・ネットワークなどの伝送速度・容量などのことを指す。

スロークエリ：データベース管理システムに対する問い合わせのうち、一定の基準に照らして遅い、時間がかかっているもの。

クエリログ：クライアントからの MySQL Server への接続・接続解除の情報、およびクライアントから実行された全ての SQL クエリを出力してくれるログのこと。

IDE（統合開発環境）：複数の一般的な開発ツールを 1 つの GUI で使えるようにまとめた、アプリケーション開発用のソフトウェアです。

Eclipse：主にJavaによるオープンソースの統合開発環境として開発され、Eclipse自身もJavaで記述されているため、Java仮想マシン（Java VM）が動作する様々な機種やOS上で同じように動作する。

NetBeans：プロジェクト管理機能や入力支援機能を備えたオープンソースの統合開発環境。
　　　　　Java,JavaScript,PHP,CおよびC++などをサポート。
　　　　　
SpringToolSuite：EclipseもIDEだが、STSはSpringSourceがターゲットとしてきた、エンタープライズJava開発に特化した統合開発環境である。

DBツール：複数の主体で共有、利用したり、用途に応じて加工や再利用がしやすいように、一定の形式で作成、管理されたデータの集合のこと。

A5:SQL Mk-2：データベース開発において生産性を向上させるべく開発されたSQL開発ツール。 

pgAdmin：PostgreSQLの管理ツールの一つで、ネットワークを通じて遠隔のデータベースサーバを
グラフィカルな表示・操作体系（GUI）で管理することができるもの。 オープンソースとして公開されている。

DBeaver：SQLクライアント&DB管理ツール。

クライアント：SQL Server データベース エンジンなど、サーバーが提供するサービスを使用するフロントエンドのアプリケーション。

MySQL Workbench：データベースアーキテクト、開発者、DBA のための統合ビジュアルツールです。

Sequel Pro：Mac専用。無料で使えるMySQLデータ管理ソフト。

TeamSQL：DB横断で使える。接続数に上限無し。そして無料。クエリ実行履歴が見やすい。UIが洗練されてる。

PM(プロジェクトマネージャー)：情報システムや組み込みシステムなど、システム開発プロジェクトにおける責任者。

PL(プロジェクトリーダー)：システムの構築・導入プロジェクトにおいて、プロジェクトチームを管理・統括する業務。

PG(プログラマ)：プログラミング言語やソフトウェア開発ツールなどを用いてコンピュータプログラムを作成・修正する技術者のこと。

SE(システムエンジニア)：クライアントからのヒアリングやシステムの設計を行う。上流工程を担当。

デザイナー：クライアントや依頼者の求めに応じたデザインを考案する仕事。

エンジニア：「工学（エンジニアリング）に関する専門的な知識やスキルを持った人材」。

フロントエンド・エンジニア：一般的にウェブサイトやアプリのフロントエンド側の設計・構築・カスタマイズを行う職種。

フロントエンド：ユーザーとウェブサイトが直接接触する要素を指します。

サーバーサイド・エンジニア：サーバー側で動作するプログラムの開発やデータ処理などをおこなうエンジニアの事を指す。

バックエンド・エンジニア：システムやサイトを利用するユーザーの目には見えることのない部分を担当する職種。

UI(ユーザーインターフェース)：ユーザーとプロダクトをつなぐ接点を意味する。見やすさ。使いやすさ。

CUI(キャラクタユーザインターフェース)：コンピュータやソフトウェアが利用者に情報を提示したり操作を受け付けたりする方法。すべてのやり取りを文字によって行う方式。キーボードでしか操作できない画面。

GUI(グラフィカルユーザインターフェース)：マウスや指などでポチポチ操作できる画面のこと。

ファイル：コンピュータにおけるデータの管理単位の一つで、ストレージ装置などにデータを記録する際に利用者やOSから見て最小の記録単位となるデータのまとまり。

拡張子：ファイル名と拡張子の間は .（ドット）で区切られている。jpg、PDFファイルは pdf、Word文書は doc、音楽ファイルは mp3など。

ディレクトリ：「ハードディスクなどの記録メディア上のファイルの保存場所」を指す。

ルート・ディレクトリ：ディレクトリを枝分かれ構造で表現した際の根っこ部分に相当するディレクトリ。要するに一番上のディレクトリのこと。

カレント・ディレクトリ：自分が今いるディレクトリのこと。

パス：ファイルやフォルダの置いてある場所を示す情報。

絶対パス：ファイルやフォルダの場所（パス）の表し方のひとつ。一番上から全部説明したファイルやフォルダの場所。/フォルダ1/フォルダ2/フォルダ3/テキスト1

相対パス：自分がいる場所を基準にして説明したファイルやフォルダの場所。

LAN(ローカルエリアネットワーク)：狭い範囲で作られるネットワークのこと（社内ネットワークとか）

WAN：広い範囲で作られるネットワーク（インターネットっぽいやつ）

クライアント：他のコンピュータやソフトウェアから機能や情報の提供を受けるコンピュータやソフトウェアの事。利用者側のコンピュータ、あるいは、お客さまのこと。

サーバー：サービスや機能を提供する側のコンピュータ、もしくは、サーバ用のコンピュータ。

HTTP：ホームページのファイルを受け渡しするときに使うお約束事。

FTP：ファイルを送受信する仕組み。

HTTPS：インターネットで暗号化通信をやるときに使うお約束事。

SSL：インターネット上でやり取りする情報を暗号化して送受信するための仕組み。公開鍵暗号方式で共通鍵の受け渡しを行い、あとは受け渡した共通鍵を使って共通鍵暗号方式（秘密鍵暗号方式）でやり取りすることで、通信の安全性を高める仕組み。

SSH：通信が暗号化されるtelnet。

telnet：「他のコンピュータを遠隔操作するための仕組み」

ポート：ネットワークからパソコンさんにお邪魔するときに通るドアのこと。または機器との「接続口」のこと。

ポート番号：ネットワークとパソコンの間にあるドア（ポート）に割り振られている識別用の番号のこと。

HTTPのポート番号：80
HTTPのポート番号：443
FTPのポート番号：21
SSHのポート番号：22
TELNETポート番号：23
DNSポート番号：53
NTPポート番号：123

ファイアウォール：信頼できない外部ネットワークの攻撃から内部ネットワークを保護するシステム。

TCP：安全性重視、確認を取りながら送る通信プロトコルおこと。

IPアドレス：インターネットをするときにコンピュータに割り当てられる住所。

グローバルIPアドレス：全世界で一意になる、重複しないIPアドレスのこと。

プライベートIPアドレス：仲間内でのみ通用するIPアドレス。

ドメイン：TCP/IPネットワーク上で機器やネットワークを識別するドメイン名（domain name）を指すことが多い。

DNS：IPアドレスとドメイン名の紐付けするシステム。

VPN(仮想プライベートネットワーク)：実際には専用線ではないんだけど、あれやこれやをすることで専用線っぽい使い勝手にしてくれるサービスとか機能のこと。

ブリッジ：MACアドレスを見てデータの行き先を振り分けてくれる機器。

プロキシサーバー：インターネットに直接接続できないコンピューターに代わり、インターネットに接続し、Webサイトへのアクセスなどを行うサーバーのことを指す。

SMTP：メールを送信するための通信プロトコルの一つ。

POP：メールを受信するための通信プロトコル。
メールサーバのメールスプールに動的にアクセスするために用いられるプロトコルで、メールサーバからメールを読み出すときに使う。

IMAP：電子メール（eメール）を受信するための通信規約（プロトコル）の一つ。
利用者が自分宛ての電子メールを保管しているメール受信サーバにアクセスし、新着を確認したり一覧から必要なものを選んで手元に受信する手順を定めている。

セッション：接続を確立してから切断するまでの一連の通信のこと。

クッキー：Webサーバーがクライアントコンピュータに預けておく小さなファイルのことです。

キャッシュ：低速な記憶装置や伝送路から読み出したデータのうち、直近に読み込んだものや使用頻度が高いものを高速な記憶装置に複製しておくこと。

インデックス：多数のものの中から特定の対象をすばやく見つけ出すため識別情報や、整列された所在情報の一覧などを指すことが多い。

フロー：コンピュータプログラムを構成する命令や手続き、処理の流れなどのこと。

タスク：ンピューターが処理するプログラムの処理単位のこと。

Git：オープンソースの分散バージョン管理システムの一つ。 

SVN：バージョン管理システムのひとつ。ファイルの変更履歴を管理してくれるシステム。

デグレ：新しいバージョンのソフトウェアの品質が、以前より悪くなること。
プログラムにおいて、直したはずのバグが復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと。

マージツール：FDLファイル又はDTDファイルの変更内容をMDLファイルにマージできる。